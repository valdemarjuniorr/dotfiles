-- Plugin management setup
local ensure_packer = function()
	local fn = vim.fn
	local install_path = fn.stdpath("data")
		.. "/site/pack/packer/start/packer.nvim"
	if fn.empty(fn.glob(install_path)) > 0 then
		fn.system({
			"git",
			"clone",
			"--depth",
			"1",
			"https://github.com/wbthomason/packer.nvim",
			install_path,
		})
		vim.cmd([[packadd packer.nvim]])
		return true
	end
	return false
end

local packer_bootstrap = ensure_packer()

-- Initialize packer
require("packer").startup(function(use)
	-- Packer can manage itself
	use("wbthomason/packer.nvim")

	-- Your existing plugins
	--use("scrooloose/nerdtree")
	use({ "nvim-treesitter/nvim-treesitter", run = ":TSUpdate" })
	use({ "fatih/vim-go", tag = "*", run = ":GoInstallBinaries" })
	use({ "nsf/gocode", rtp = "vim" })
	use("Raimondi/delimitMate")
	use("cespare/vim-toml")
	use({ "junegunn/fzf", run = ":fzf#install()" })
	use({ "junegunn/fzf.vim" })
	use("fatih/vim-hclfmt")
	use("Yggdroot/indentLine")
	use("godlygeek/tabular")
	use("terryma/vim-multiple-cursors")
	use("ntpeters/vim-better-whitespace")
	use("tpope/vim-endwise")
	use("elzr/vim-json")
	use("junegunn/vim-easy-align")
	use("ekalinin/Dockerfile.vim")
	use("luochen1990/rainbow")
	use("hashivim/vim-terraform")
	use("tpope/vim-fugitive")
	use("airblade/vim-gitgutter")
	use("vim-airline/vim-airline")
	use("vim-airline/vim-airline-themes")
	use({ "mhinz/vim-sayonara", cmd = "Sayonara" })
	use("moll/vim-bbye")
	use("nvim-lua/plenary.nvim")
	use("ayu-theme/ayu-vim")
	use("folke/trouble.nvim")

	-- LSP configurations
	use({
		"mason-org/mason.nvim",
		run = ":MasonUpdate",
		config = function()
			require("mason").setup()
		end,
	})

	-- Mason-LSPConfig (integra LSPs ao Mason)
	use({
		"williamboman/mason-lspconfig.nvim",
		after = "mason.nvim",
		config = function()
			require("mason-lspconfig").setup({
				ensure_installed = { "lua_ls" }, -- LSPs
				automatic_installation = true,
			})
		end,
	})

	-- LSPConfig
	use({
		"neovim/nvim-lspconfig",
		after = "mason-lspconfig.nvim",
		config = function()
			local lspconfig = require("lspconfig")
			lspconfig.lua_ls.setup({})
			-- Define keymaps for common LSP functions
			vim.keymap.set("n", "gd", vim.lsp.buf.definition)
			vim.keymap.set("n", "gr", vim.lsp.buf.references)
			vim.keymap.set("n", "K", vim.lsp.buf.hover)
			vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action)
		end,
	})

	-- None-LS
	use({
		"nvimtools/none-ls.nvim",
		after = "nvim-lspconfig",
		config = function()
			local null_ls = require("null-ls")

			null_ls.setup({
				sources = {
					-- Formatters
					null_ls.builtins.formatting.prettier,
					null_ls.builtins.formatting.stylua,
					null_ls.builtins.formatting.google_java_format,

					-- Linters
					null_ls.builtins.diagnostics.eslint_d,
				},
				on_attach = function(client, bufnr)
					-- On save formatters
					if client.supports_method("textDocument/formatting") then
						local augroup = vim.api.nvim_create_augroup(
							"LspFormatting",
							{ clear = true }
						)
						vim.api.nvim_clear_autocmds({
							group = augroup,
							buffer = bufnr,
						})
						vim.api.nvim_create_autocmd("BufWritePre", {
							group = augroup,
							buffer = bufnr,
							callback = function()
								vim.lsp.buf.format({ async = false })
							end,
						})
					end
				end,
			})
			vim.keymap.set("n", "<leader>gf", vim.lsp.buf.format, {})
		end,
	})

	-- Mason + None-LS integration
	use({
		"jay-babu/mason-null-ls.nvim", -- nome ainda Ã© antigo
		after = { "mason.nvim", "none-ls.nvim" },
		config = function()
			require("mason-null-ls").setup({
				ensure_installed = {
					"prettier",
					"stylua",
					"eslint_d",
					"google-java-format",
				},
				automatic_installation = true,
			})
		end,
	})

	if packer_bootstrap then
		require("packer").sync()
	end
end)

-- Basic settings
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.backspace = "indent,eol,start"
vim.opt.showcmd = true
vim.opt.showmode = true
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.splitright = true
vim.opt.splitbelow = true
vim.opt.encoding = "utf-8"
vim.opt.autowrite = true
vim.opt.autoread = true
vim.opt.laststatus = 2
vim.opt.hidden = true
vim.opt.ruler = true
vim.opt.clipboard = "unnamed,unnamedplus"

-- Search settings
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.incsearch = true
vim.opt.hlsearch = true

-- Performance settings
vim.opt.lazyredraw = true
vim.opt.synmaxcol = 300
vim.opt.updatetime = 300

-- Indentation settings
vim.opt.autoindent = true
vim.opt.smarttab = true
vim.opt.expandtab = true
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.softtabstop = 2

-- Leader key
vim.g.mapleader = ","

-- Color settings
vim.opt.termguicolors = true
vim.g.ayucolor = "mirage"
vim.cmd([[colorscheme ayu]])

-- Key mappings
local map = vim.api.nvim_set_keymap
local opts = { noremap = true, silent = true }

-- NERDTree mappings
map("n", "<C-n>", ":NERDTreeToggle<CR>", opts)
map("n", "<Leader>n", ":NERDTreeToggle<CR>", opts)
map("n", "<Leader>f", ":NERDTreeFind<CR>", opts)

-- Buffer navigation
map("n", "<C-x>", ":bnext<CR>", opts)
map("n", "<C-z>", ":bprev<CR>", opts)

-- Ctrl+S then B -> horizontal split (below)
map("n", "<C-s>b", "<C-w>s", opts)
-- Ctrl+S then V -> vertical split (right)
map("n", "<C-s>v", "<C-w>v", opts)

-- Split navigation
map("n", "<C-j>", "<C-W>j", opts)
map("n", "<C-k>", "<C-W>k", opts)
map("n", "<C-h>", "<C-W>h", opts)
map("n", "<C-l>", "<C-W>l", opts)

-- Quick save
map("n", "<leader>w", ":w!<cr>", opts)

-- Center screen
map("n", "<space>", "zz", opts)

-- Insert mode escape
map("i", "jk", "<ESC>l", opts)

-- FZF mappings
map("n", "<C-p>", ":Files<CR>", opts) -- Search files
map("n", "<Leader>b", ":Buffers<CR>", opts) -- Search open buffers

-- Plugin settings
vim.g.NERDTreeShowHidden = 1
vim.g.NERDTreeIgnore = {
	"\\.vim$",
	"\\.git$",
	"\\.DS_Store$",
}

-- Go settings
vim.g.go_fmt_command = "goimports"
vim.g.go_autodetect_gopath = 1
vim.g.go_highlight_build_constraints = 1

-- Airline settings
vim.g.airline_theme = "ayu"
vim.g.airline_powerline_fonts = 1

-- Rainbow settings
vim.g.rainbow_active = 1

-- File type settings
vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
	pattern = "*.lua",
	command = "setlocal noexpandtab tabstop=2 shiftwidth=2",
})

vim.api.nvim_create_autocmd({ "BufNewFile", "BufRead" }, {
	pattern = "*.go",
	command = "setlocal noexpandtab tabstop=2 shiftwidth=2",
})

-- Wild menu settings
vim.opt.wildmenu = true
vim.opt.wildmode = "list:full"

-- Wild ignore patterns
vim.opt.wildignore:append({
	"*.o,*.obj,*.dll,*.exe",
	"*.git,*.svn",
	"*.zip,*.tar.gz",
	"*.pyc",
	"*.DS_Store",
	"*.db",
})

-- Set up auto commands for quickfix window
vim.api.nvim_create_autocmd("FileType", {
	pattern = "qf",
	command = "wincmd J",
})

-- DelimitMate settings
vim.g.delimitMate_expand_cr = 1
vim.g.delimitMate_expand_space = 1
vim.g.delimitMate_smart_quotes = 1

-- Multiple cursors settings
vim.g.multi_cursor_use_default_mapping = 0
vim.g.multi_cursor_next_key = "<C-i>"
vim.g.multi_cursor_prev_key = "<C-y>"
vim.g.multi_cursor_skip_key = "<C-b>"
vim.g.multi_cursor_quit_key = "<Esc>"
